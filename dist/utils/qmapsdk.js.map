{"version":3,"sources":["utils/qmapsdk.js"],"names":["ERROR_CONF","KEY_ERR","KEY_ERR_MSG","PARAM_ERR","PARAM_ERR_MSG","SYSTEM_ERR","SYSTEM_ERR_MSG","WX_ERR_CODE","WX_OK_CODE","BASE_URL","URL_SEARCH","URL_SUGGESTION","URL_GET_GEOCODER","URL_CITY_LIST","URL_AREA_LIST","URL_DISTANCE","Utils","location2query","data","query","i","length","d","location","lat","lng","latitude","longitude","getWXLocation","success","fail","complete","wx","getLocation","type","getLocationParam","locationArr","split","polyfillParam","param","checkParamKeyEmpty","key","errconf","buildErrorConfig","checkKeyword","checkLocation","errCode","errMsg","status","message","buildWxRequestConfig","options","that","header","method","res","statusCode","result","locationProcess","locationsuccess","locationfail","locationcomplete","QQMapWX","Error","requestParam","keyword","orderby","page_size","page_index","output","address_format","filter","distance","auto_extend","boundary","request","url","region","region_fix","policy","coord_type","get_poi","poi_options","address","id","mode","to","from","module","exports"],"mappings":"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","file":"qmapsdk.js","sourcesContent":["/*eslint-disable*/\r\nvar ERROR_CONF = {\r\n    KEY_ERR: 311,\r\n    KEY_ERR_MSG: 'key格式错误',\r\n    PARAM_ERR: 310,\r\n    PARAM_ERR_MSG: '请求参数信息有误',\r\n    SYSTEM_ERR: 600,\r\n    SYSTEM_ERR_MSG: '系统错误',\r\n    WX_ERR_CODE: 1000,\r\n    WX_OK_CODE: 200\r\n};\r\nvar BASE_URL = 'https://apis.map.qq.com/ws/';\r\nvar URL_SEARCH = BASE_URL + 'place/v1/search';\r\nvar URL_SUGGESTION = BASE_URL + 'place/v1/suggestion';\r\nvar URL_GET_GEOCODER = BASE_URL + 'geocoder/v1/';\r\nvar URL_CITY_LIST = BASE_URL + 'district/v1/list';\r\nvar URL_AREA_LIST = BASE_URL + 'district/v1/getchildren';\r\nvar URL_DISTANCE = BASE_URL + 'distance/v1/';\r\nvar Utils = {\r\n    /**\r\n     * 得到终点query字符串\r\n     * @param {Array|String} 检索数据\r\n     */\r\n    location2query(data) {\r\n        if (typeof data == 'string') {\r\n            return data;\r\n        }\r\n        var query = '';\r\n        for (var i = 0; i < data.length; i++) {\r\n            var d = data[i];\r\n            if (!!query) {\r\n                query += ';';\r\n            }\r\n            if (d.location) {\r\n                query = query + d.location.lat + ',' + d.location.lng;\r\n            }\r\n            if (d.latitude && d.longitude) {\r\n                query = query + d.latitude + ',' + d.longitude;\r\n            }\r\n        }\r\n        return query;\r\n    },\r\n\r\n    /**\r\n     * 使用微信接口进行定位\r\n     */\r\n    getWXLocation(success, fail, complete) {\r\n        wx.getLocation({\r\n            type: 'gcj02',\r\n            success: success,\r\n            fail: fail,\r\n            complete: complete\r\n        });\r\n    },\r\n\r\n    /**\r\n     * 获取location参数\r\n     */\r\n    getLocationParam(location) {\r\n        if (typeof location == 'string') {\r\n            var locationArr = location.split(',');\r\n            if (locationArr.length === 2) {\r\n                location = {\r\n                    latitude: location.split(',')[0],\r\n                    longitude: location.split(',')[1]\r\n                };\r\n            } else {\r\n                location = {};\r\n            }\r\n        }\r\n        return location;\r\n    },\r\n\r\n    /**\r\n     * 回调函数默认处理\r\n     */\r\n    polyfillParam(param) {\r\n        param.success = param.success || function () { };\r\n        param.fail = param.fail || function () { };\r\n        param.complete = param.complete || function () { };\r\n    },\r\n\r\n    /**\r\n     * 验证param对应的key值是否为空\r\n     * \r\n     * @param {Object} param 接口参数\r\n     * @param {String} key 对应参数的key\r\n     */\r\n    checkParamKeyEmpty(param, key) {\r\n        if (!param[key]) {\r\n            var errconf = this.buildErrorConfig(ERROR_CONF.PARAM_ERR, ERROR_CONF.PARAM_ERR_MSG + key +'参数格式有误');\r\n            param.fail(errconf);\r\n            param.complete(errconf);\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n\r\n    /**\r\n     * 验证参数中是否存在检索词keyword\r\n     * \r\n     * @param {Object} param 接口参数\r\n     */\r\n    checkKeyword(param){\r\n        return !this.checkParamKeyEmpty(param, 'keyword');\r\n    },\r\n\r\n    /**\r\n     * 验证location值\r\n     * \r\n     * @param {Object} param 接口参数\r\n     */\r\n    checkLocation(param) {\r\n        var location = this.getLocationParam(param.location);\r\n        if (!location || !location.latitude || !location.longitude) {\r\n            var errconf = this.buildErrorConfig(ERROR_CONF.PARAM_ERR, ERROR_CONF.PARAM_ERR_MSG + ' location参数格式有误')\r\n            param.fail(errconf);\r\n            param.complete(errconf);\r\n            return false;\r\n        }\r\n        return true;\r\n    },\r\n\r\n    /**\r\n     * 构造错误数据结构\r\n     * @param {Number} errCode 错误码\r\n     * @param {Number} errMsg 错误描述\r\n     */\r\n    buildErrorConfig(errCode, errMsg) {\r\n        return {\r\n            status: errCode,\r\n            message: errMsg\r\n        };\r\n    },\r\n\r\n    /**\r\n     * 构造微信请求参数，公共属性处理\r\n     * \r\n     * @param {Object} param 接口参数\r\n     * @param {Object} param 配置项\r\n     */\r\n    buildWxRequestConfig(param, options) {\r\n        var that = this;\r\n        options.header = { \"content-type\": \"application/json\" };\r\n        options.method = 'GET';\r\n        options.success = function (res) {\r\n            var data = res.data;\r\n            if (data.status === 0) {\r\n                param.success(data);\r\n            } else {\r\n                param.fail(data);\r\n            }\r\n        };\r\n        options.fail = function (res) {\r\n            res.statusCode = ERROR_CONF.WX_ERR_CODE;\r\n            param.fail(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, result.errMsg));\r\n        };\r\n        options.complete = function (res) {\r\n            var statusCode = +res.statusCode;\r\n            switch(statusCode) {\r\n                case ERROR_CONF.WX_ERR_CODE: {\r\n                    param.complete(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\r\n                    break;\r\n                }\r\n                case ERROR_CONF.WX_OK_CODE: {\r\n                    var data = res.data;\r\n                    if (data.status === 0) {\r\n                        param.complete(data);\r\n                    } else {\r\n                        param.complete(that.buildErrorConfig(data.status, data.message));\r\n                    }\r\n                    break;\r\n                }\r\n                default:{\r\n                    param.complete(that.buildErrorConfig(ERROR_CONF.SYSTEM_ERR, ERROR_CONF.SYSTEM_ERR_MSG));\r\n                }\r\n\r\n            }\r\n        }\r\n        return options;\r\n    },\r\n\r\n    /**\r\n     * 处理用户参数是否传入坐标进行不同的处理\r\n     */\r\n    locationProcess(param, locationsuccess, locationfail, locationcomplete) {\r\n        var that = this;\r\n        locationfail = locationfail || function (res) {\r\n            res.statusCode = ERROR_CONF.WX_ERR_CODE;\r\n            param.fail(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\r\n        };\r\n        locationcomplete = locationcomplete || function (res) {\r\n            if (res.statusCode == ERROR_CONF.WX_ERR_CODE) {\r\n                param.complete(that.buildErrorConfig(ERROR_CONF.WX_ERR_CODE, res.errMsg));\r\n            }\r\n        };\r\n        if (!param.location) {\r\n            that.getWXLocation(locationsuccess, locationfail, locationcomplete);\r\n        } else if (that.checkLocation(param)) {\r\n            var location = Utils.getLocationParam(param.location);\r\n            locationsuccess(location);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass QQMapWX {\r\n\r\n    /**\r\n     * 构造函数\r\n     * \r\n     * @param {Object} options 接口参数,key 为必选参数\r\n     */\r\n    constructor(options) {\r\n        if (!options.key) {\r\n            throw Error('key值不能为空');\r\n        }\r\n        this.key = options.key;\r\n    }\r\n\r\n    /**\r\n     * POI周边检索\r\n     *\r\n     * @param {Object} options 接口参数对象\r\n     * \r\n     * 参数对象结构可以参考\r\n     * @see http://lbs.qq.com/webservice_v1/guide-search.html\r\n     */\r\n    search(options) {\r\n        var that = this;\r\n        options = options || {};\r\n\r\n        Utils.polyfillParam(options);\r\n\r\n        if (!Utils.checkKeyword(options)) {\r\n            return;\r\n        }\r\n\r\n        var requestParam = {\r\n            keyword: options.keyword,\r\n            orderby: options.orderby || '_distance',\r\n            page_size: options.page_size || 10,\r\n            page_index: options.page_index || 1,\r\n            output: 'json',\r\n            key: that.key\r\n        };\r\n\r\n        if (options.address_format) {\r\n            requestParam.address_format = options.address_format;\r\n        }\r\n\r\n        if (options.filter) {\r\n            requestParam.filter = options.filter;\r\n        }\r\n\r\n        var distance = options.distance || \"1000\";\r\n        var auto_extend = options.auto_extend || 1;\r\n\r\n        var locationsuccess = function (result) {\r\n            requestParam.boundary = \"nearby(\" + result.latitude + \",\" + result.longitude + \",\" + distance + \",\" + auto_extend +\")\";\r\n            wx.request(Utils.buildWxRequestConfig(options, {\r\n                url: URL_SEARCH,\r\n                data: requestParam\r\n            }));\r\n        }\r\n        Utils.locationProcess(options, locationsuccess);\r\n    }\r\n\r\n    /**\r\n     * sug模糊检索\r\n     *\r\n     * @param {Object} options 接口参数对象\r\n     * \r\n     * 参数对象结构可以参考\r\n     * http://lbs.qq.com/webservice_v1/guide-suggestion.html\r\n     */\r\n    getSuggestion(options) {\r\n        var that = this;\r\n        options = options || {};\r\n        Utils.polyfillParam(options);\r\n\r\n        if (!Utils.checkKeyword(options)) {\r\n            return;\r\n        }\r\n\r\n        var requestParam = {\r\n            keyword: options.keyword,\r\n            region: options.region || '全国',\r\n            region_fix: options.region_fix || 0,\r\n            policy: options.policy || 0,\r\n            output: 'json',\r\n            key: that.key\r\n        };\r\n        wx.request(Utils.buildWxRequestConfig(options, {\r\n            url: URL_SUGGESTION,\r\n            data: requestParam\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * 逆地址解析\r\n     *\r\n     * @param {Object} options 接口参数对象\r\n     * \r\n     * 请求参数结构可以参考\r\n     * http://lbs.qq.com/webservice_v1/guide-gcoder.html\r\n     */\r\n    reverseGeocoder(options) {\r\n        var that = this;\r\n        options = options || {};\r\n        Utils.polyfillParam(options);\r\n        var requestParam = {\r\n            coord_type: options.coord_type || 5,\r\n            get_poi: options.get_poi || 0,\r\n            output: 'json',\r\n            key: that.key\r\n        };\r\n        if (options.poi_options) {\r\n            requestParam.poi_options = options.poi_options\r\n        }\r\n\r\n        var locationsuccess = function (result) {\r\n            requestParam.location = result.latitude + ',' + result.longitude;\r\n            wx.request(Utils.buildWxRequestConfig(options, {\r\n                url: URL_GET_GEOCODER,\r\n                data: requestParam\r\n            }));\r\n        };\r\n        Utils.locationProcess(options, locationsuccess);\r\n    }\r\n\r\n    /**\r\n     * 地址解析\r\n     *\r\n     * @param {Object} options 接口参数对象\r\n     * \r\n     * 请求参数结构可以参考\r\n     * http://lbs.qq.com/webservice_v1/guide-geocoder.html\r\n     */\r\n    geocoder(options) {\r\n        var that = this;\r\n        options = options || {};\r\n        Utils.polyfillParam(options);\r\n\r\n        if (Utils.checkParamKeyEmpty(options, 'address')) {\r\n            return;\r\n        }\r\n\r\n        var requestParam = {\r\n            address: options.address,\r\n            output: 'json',\r\n            key: that.key\r\n        };\r\n\r\n        wx.request(Utils.buildWxRequestConfig(options, {\r\n            url: URL_GET_GEOCODER,\r\n            data: requestParam\r\n        }));\r\n    }\r\n\r\n\r\n    /**\r\n     * 获取城市列表\r\n     *\r\n     * @param {Object} options 接口参数对象\r\n     * \r\n     * 请求参数结构可以参考\r\n     * http://lbs.qq.com/webservice_v1/guide-region.html\r\n     */\r\n    getCityList(options) {\r\n        var that = this;\r\n        options = options || {};\r\n        Utils.polyfillParam(options);\r\n        var requestParam = {\r\n            output: 'json',\r\n            key: that.key\r\n        };\r\n\r\n        wx.request(Utils.buildWxRequestConfig(options, {\r\n            url: URL_CITY_LIST,\r\n            data: requestParam\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * 获取对应城市ID的区县列表\r\n     *\r\n     * @param {Object} options 接口参数对象\r\n     * \r\n     * 请求参数结构可以参考\r\n     * http://lbs.qq.com/webservice_v1/guide-region.html\r\n     */\r\n    getDistrictByCityId(options) {\r\n        var that = this;\r\n        options = options || {};\r\n        Utils.polyfillParam(options);\r\n\r\n        if (Utils.checkParamKeyEmpty(options, 'id')) {\r\n            return;\r\n        }\r\n\r\n        var requestParam = {\r\n            id: options.id || '',\r\n            output: 'json',\r\n            key: that.key\r\n        };\r\n\r\n        wx.request(Utils.buildWxRequestConfig(options, {\r\n            url: URL_AREA_LIST,\r\n            data: requestParam\r\n        }));\r\n    }\r\n\r\n    /**\r\n     * 用于单起点到多终点的路线距离(非直线距离)计算：\r\n     * 支持两种距离计算方式：步行和驾车。\r\n     * 起点到终点最大限制直线距离10公里。\r\n     *\r\n     * @param {Object} options 接口参数对象\r\n     * \r\n     * 请求参数结构可以参考\r\n     * http://lbs.qq.com/webservice_v1/guide-distance.html\r\n     */\r\n    calculateDistance(options) {\r\n        var that = this;\r\n        options = options || {};\r\n        Utils.polyfillParam(options);\r\n\r\n        if (Utils.checkParamKeyEmpty(options, 'to')) {\r\n            return;\r\n        }\r\n\r\n        var requestParam = {\r\n            mode: options.mode || 'walking',\r\n            to: Utils.location2query(options.to),\r\n            output: 'json',\r\n            key: that.key\r\n        };\r\n\r\n        var locationsuccess = function (result) {\r\n            requestParam.from = result.latitude + ',' + result.longitude;\r\n            wx.request(Utils.buildWxRequestConfig(options, {\r\n                url: URL_DISTANCE,\r\n                data: requestParam\r\n            }));\r\n        }\r\n        if (options.from) {\r\n            options.location = options.from;\r\n        }\r\n        \r\n        Utils.locationProcess(options, locationsuccess);\r\n    }\r\n}\r\n\r\nmodule.exports = QQMapWX;"]}